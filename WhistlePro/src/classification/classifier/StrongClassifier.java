package classifier;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File; 
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException; 
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
 
/***
 * Represents a strong classifier built with Adaboost.
 * It contains a list of weak classifiers and the 
 * methods to build them.
 * @author  Mohamed
 *
 */
public class StrongClassifier {
	
	private ArrayList<WeakClassifier> classifiers = null;
	
	/***
	 * @return a string which contains the data of 
	 * all the weak classifiers following this format :
	 * "<weakClassifier>XX</weakClassifier>" where XX 
	 * is the data of the weak classifier.
	 */
	public String toString()
	{
		String res = "";
		res += classifiers.size()+" classifiers\n";
		for(WeakClassifier c : classifiers)
		{
			res = res + "<weakClassifier>" + c.toString() + "</weakClassifier>\n";
		}
		return res;
	}
	
	
	/***
	 * Applies the classifier to the sample.
	 * @param sample to test.
	 * @return -1 if it is rejected by the classifier,
	 * otherwise returns 1.
	 */
	public double testSample(FeatureProviderInterface sample)
	{
		double res = 0;
		for(WeakClassifier c : classifiers)
		{
			res = res + c.applyClassifier(sample)*c.getCoef();
		}
		
		return (res<0)?-1:1;
	}
	
	/***
	 * Method that builds the strong classifier by computing the weak classifiers
	 * following the Adaboost algorithm on the examples given.
	 * @param examples used to train the classifier.
	 * @param nbFeatures is the number of features of an example.
	 * @param nbWeakClassifer is the number of weak classifier to build.
	 */
	public void buildClassifier(ArrayList<ClassifTrainExample> examples, int nbFeatures, int nbWeakClassifer)
	{
 
		ArrayList<WeakClassifier> classifiers = new ArrayList<WeakClassifier>();
		
		ArrayList<Double> weights = new ArrayList<Double>();
		int examplesNb = examples.size();
		double defWeight = 1.0/examplesNb;
		for(int i = 0; i < examplesNb; i++)
		{
			weights.add(defWeight);
		}
		 
		
		for(int r = 0; r < nbWeakClassifer; r++)
		{ 
			WeakClassifier classifier = trainWeakClassifier(examples,examplesNb,nbFeatures,weights);
			classifiers.add(classifier);
			double epsilon = classifier.getError();
			if(epsilon<=1E-10) break;
			double alpha = Math.log((1-epsilon)/epsilon);
			classifier.setCoef(alpha); 

			for(int i = 0; i < examplesNb; i++)
			{
				ClassifTrainExample ex = examples.get(i);
				double w = weights.get(i).doubleValue();
				weights.remove(i);
				double tmp = w*Math.exp(-alpha*ex.isValid()*classifier.applyClassifier(ex));
				tmp = tmp/(2*Math.sqrt(epsilon*(1-epsilon)));
				weights.add(i, tmp);
			}
			
			
			
		}
		 
		
		this.classifiers = classifiers;
	}
	
	/***
	 * Builds a weak classifier using the examples associated with their weights.
	 * @param examples used to train the classifier.
	 * @param nbExamples is the number of examples given.
	 * @param nbFeatures is the number of features of an example.
	 * @param w is the list of the weights associated with the examples.
	 * @return a weak classifier.
	 */
	private WeakClassifier trainWeakClassifier(ArrayList<ClassifTrainExample> examples,int nbExamples,int nbFeatures,ArrayList<Double> w)
	{ 
		int minPivotIndex = -1;
		int minFeatureIndex = -1;
		boolean minIsLeft = false;
		double minError = Double.MAX_VALUE,errLeft,errRight;
		
		for(int k = 0 ; k < nbExamples; k++)
		{
			for(int j = 0 ; j < nbFeatures; j++)
			{ 
				errLeft = 0;
				errRight = 0;
				
				for(int i = 0 ; i < nbExamples; i++)
				{
					double x_ij = examples.get(i).getFeature(j);
					double x_kj = examples.get(k).getFeature(j);
					int y_i = examples.get(i).isValid();

					if( (x_ij > x_kj && y_i == -1) 
							|| (x_ij < x_kj && y_i == 1) )
					{
						errLeft = errLeft + w.get(i).doubleValue();
						 
					}
					
					if( (x_ij > x_kj && y_i == 1) 
							|| (x_ij < x_kj && y_i == -1) )
					{
						errRight = errRight + w.get(i).doubleValue();
						 
					}
					
				}
 
				
				if(errLeft < minError)
				{
					minPivotIndex = k;
					minFeatureIndex = j;
					minIsLeft = true;
					minError = errLeft;
				}

				if(errRight < minError)
				{
					minPivotIndex = k;
					minFeatureIndex = j;
					minIsLeft = false;
					minError = errRight;
				}
			}
		}
		 
		return new WeakClassifier(minFeatureIndex,
				examples.get(minPivotIndex).getFeature(minFeatureIndex),
				minIsLeft,minError);
		
	}

	/***
	 * Save the data to a file, the data are generated by toString().
	 * @param fileName is name of the file where data will be saved.
	 */
	public void saveToFile(String fileName)
	{ 
		BufferedWriter bos;  
	    try { 
	    	bos = new BufferedWriter(new FileWriter(new File(fileName))); 
	    	 
	    	bos.write(toString());
	      	 
			bos.close();
	                
	    } catch (FileNotFoundException e) {
	      e.printStackTrace();
	    } catch (IOException e) {
	      e.printStackTrace();
	    }
 
	}

	/***
	 * Loads the data from a file, the data are read following
	 * the format of the funciton toString().
	 * @param fileName is name of the file where data will be read.
	 */
	public void loadFromFile(String fileName)
	{ 
		stringToClassifiers(getDataFromFile(fileName));	    
	}
	
	/***
	 * Parse the data in a string to fill a list of weak classifiers.
	 * @param str is the string containing the data.
	 */
	private void stringToClassifiers(String str)
	{
		ArrayList<WeakClassifier> classifiers = new ArrayList<WeakClassifier>();
		
		Pattern pattern = Pattern.compile("<[a-zA-Z0-9]*>.*</[a-zA-Z0-9]*>");
		Matcher matcher = pattern.matcher(str);
		
		while (matcher.find())
		{ 
			String tmp = matcher.group();
			tmp = tmp.replaceAll("<[a-zA-Z0-9]*>|</[a-zA-Z0-9]*>", "");
		    
			classifiers.add(new WeakClassifier(tmp));
		}
		
		this.classifiers = classifiers;
	}
	
	/***
	 * Open a file a load the data in a string.
	 * @param fileName is the name of the file to read.
	 * @return a string containing all the data.
	 */
	private String getDataFromFile(String fileName)
	{
		BufferedReader bis; 
	    String readData = ""; 
	    try { 
	    	bis = new BufferedReader(new FileReader(new File(fileName))); 
	    	
	      	char[] buf = new char[256]; 
	      	int ret;
			while ((ret = bis.read(buf)) != -1)
				readData += new String(buf,0,ret);

			bis.close();
	                
	    } catch (FileNotFoundException e) {
	      e.printStackTrace();
	    } catch (IOException e) {
	      e.printStackTrace();
	    }
	    
	    return readData;
	}
	
}
